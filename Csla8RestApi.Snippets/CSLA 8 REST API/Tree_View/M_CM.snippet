<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Model | Read-only tree node</Title>
            <Author>Mármarosi József</Author>
            <Description>Implements a read-only child model.</Description>
            <Shortcut>c8tvcm</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Represents an item in a read-only $root_name$ tree.
    /// </summary>
    [Serializable]
    public class $ROOT_MODEL$Node : ReadOnlyModel<$ROOT_MODEL$Node>
    {
        #region Properties

        public static readonly PropertyInfo<long?> $ROOT_MODEL$KeyProperty = RegisterProperty<long?>(nameof($ROOT_MODEL$Key));
        public long? $ROOT_MODEL$Key
        {
            get => GetProperty($ROOT_MODEL$KeyProperty);
            private set => LoadProperty($ROOT_MODEL$KeyProperty, value);
        }

        public static readonly PropertyInfo<long?> $ROOT_MODEL$IdProperty = RegisterProperty<long?>(nameof($ROOT_MODEL$Id), RelationshipTypes.PrivateField);
        public string $ROOT_MODEL$Id
        {
            get => KeyHash.Encode(ID.$ROOT_MODEL$, $ROOT_MODEL$Key);
            private set => $ROOT_MODEL$Key = KeyHash.Decode(ID.$ROOT_MODEL$, value);
        }

        public static readonly PropertyInfo<long?> ParentKeyProperty = RegisterProperty<long?>(nameof(ParentKey));
        public long? ParentKey
        {
            get => GetProperty(ParentKeyProperty);
            private set => LoadProperty(ParentKeyProperty, value);
        }

        public static readonly PropertyInfo<long?> ParentIdProperty = RegisterProperty<long?>(nameof(ParentId), RelationshipTypes.PrivateField);
        public string ParentId
        {
            get => KeyHash.Encode(ID.$ROOT_MODEL$, ParentKey);
            private set => ParentKey = KeyHash.Decode(ID.$ROOT_MODEL$, value);
        }

        public static readonly PropertyInfo<string> $ROOT_MODEL$NameProperty = RegisterProperty<string>(nameof($ROOT_MODEL$Name));
        public string $ROOT_MODEL$Name
        {
            get => GetProperty($ROOT_MODEL$NameProperty);
            private set => LoadProperty($ROOT_MODEL$NameProperty, value);
        }

        public static readonly PropertyInfo<int?> LevelProperty = RegisterProperty<int?>(nameof(Level));
        public int? Level
        {
            get => GetProperty(LevelProperty);
            private set => LoadProperty(LevelProperty, value);
        }

        public static readonly PropertyInfo<$ROOT_MODEL$Nodes> ChildrenProperty = RegisterProperty<$ROOT_MODEL$Nodes>(nameof(Children));
        public $ROOT_MODEL$Nodes Children
        {
            get => GetProperty(ChildrenProperty);
            private set => LoadProperty(ChildrenProperty, value);
        }

        #endregion

        #region Business Rules

        //protected override void AddBusinessRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        new IsInRole(
        //            AuthorizationActions.ReadProperty,
        //            $ROOT_MODEL$NameProperty,
        //            "Manager"
        //            )
        //        );
        //}

        //private static void AddObjectAuthorizationRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        typeof($ROOT_MODEL$Node),
        //        new IsInRole(
        //            AuthorizationActions.GetObject,
        //            "Manager"
        //            )
        //        );
        //}

        #endregion

        #region Factory Methods

        //internal static $ROOT_MODEL$Node Fetch($ROOT_MODEL$NodeDao dao)
        //{
        //    return DataPortal.FetchChild<$ROOT_MODEL$Node>(dao);
        //}

        #endregion

        #region Data Access

        [FetchChild]
        private void Fetch(
            $ROOT_MODEL$NodeDao dao,
            [Inject] IChildDataPortal<$ROOT_MODEL$Nodes> itemsPortal
            )
        {
            // Load values from persistent storage.
            DataMapper.Map(dao, this, "Children", "$ROOT_MODEL$Order");
            Children = itemsPortal.FetchChild(dao.Children);
        }

        #endregion
    }$end$]]>
            </Code>
            <Declarations>
                <Literal>
                    <ID>root_name</ID>
                    <ToolTip>The description of the root model in comments.</ToolTip>
                    <Default>root_name</Default>
                </Literal>
                <Literal>
                    <ID>ROOT_MODEL</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>ROOT_MODEL</Default>
                </Literal>
            </Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
