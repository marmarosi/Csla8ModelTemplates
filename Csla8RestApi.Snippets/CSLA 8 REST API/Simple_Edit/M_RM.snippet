<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Model | Editable model</Title>
            <Author>Mármarosi József</Author>
            <Description>Implements an editable root model.</Description>
            <Shortcut>c8serm</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Represents an editable $root_name$ object.
    /// </summary>
    [Serializable]
    [ValidationResourceType(typeof(SimpleText), ObjectName = "$ROOT_MODEL$")]
    public class $ROOT_MODEL$ : EditableModel<$ROOT_MODEL$, $ROOT_MODEL$Dto>
    {
        #region Properties

        public static readonly PropertyInfo<long?> $ROOT_MODEL$KeyProperty = RegisterProperty<long?>(nameof($ROOT_MODEL$Key));
        public long? $ROOT_MODEL$Key
        {
            get => GetProperty($ROOT_MODEL$KeyProperty);
            private set => SetProperty($ROOT_MODEL$KeyProperty, value);
        }

        public static readonly PropertyInfo<string?> $ROOT_MODEL$IdProperty = RegisterProperty<string?>(nameof($ROOT_MODEL$Id), RelationshipTypes.PrivateField);
        public string? $ROOT_MODEL$Id
        {
            get => KeyHash.Encode(ID.$ROOT_MODEL$, $ROOT_MODEL$Key);
            set => $ROOT_MODEL$Key = KeyHash.Decode(ID.$ROOT_MODEL$, value);
        }

        public static readonly PropertyInfo<string?> $ROOT_MODEL$CodeProperty = RegisterProperty<string?>(nameof($ROOT_MODEL$Code));
        [Required]
        [MaxLength(10)]
        public string? $ROOT_MODEL$Code
        {
            get => GetProperty($ROOT_MODEL$CodeProperty);
            set => SetProperty($ROOT_MODEL$CodeProperty, value);
        }

        public static readonly PropertyInfo<string?> $ROOT_MODEL$NameProperty = RegisterProperty<string?>(nameof($ROOT_MODEL$Name));
        [Required]
        [MaxLength(100)]
        public string? $ROOT_MODEL$Name
        {
            get => GetProperty($ROOT_MODEL$NameProperty);
            set => SetProperty($ROOT_MODEL$NameProperty, value);
        }

        public static readonly PropertyInfo<DateTimeOffset?> TimestampProperty = RegisterProperty<DateTimeOffset?>(nameof(Timestamp));
        public DateTimeOffset? Timestamp
        {
            get =>  GetProperty(TimestampProperty);
            private set => LoadProperty(TimestampProperty, value);
        }

        #endregion

        #region Business Rules

        //protected override void AddBusinessRules()
        //{
        //    // Call base class implementation to add data annotation rules to BusinessRules.
        //    // NOTE: DataAnnotation rules is always added with Priority = 0.
        //    base.AddBusinessRules();

        //    // Add validation rules.
        //    BusinessRules.AddRule(new Required($ROOT_MODEL$NameProperty));

        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        new IsInRole(
        //            AuthorizationActions.ReadProperty,
        //            $ROOT_MODEL$NameProperty,
        //            "Manager"
        //            )
        //        );
        //}

        //private static void AddObjectAuthorizationRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        typeof($ROOT_MODEL$),
        //        new IsInRole(
        //            AuthorizationActions.EditObject,
        //            "Manager"
        //            )
        //        );
        //}

        #endregion

        #region Business Methods

        /// <summary>
        /// Updates an editable model and its children from the data transfer object.
        /// </summary>
        /// <param name="dto">The data transfer object.</param>
        /// <param name="childFactory">The child data portal factory.</param>
        public override async Task SetValuesOnBuild(
            $ROOT_MODEL$Dto dto,
            IChildDataPortalFactory childFactory
            )
        {
            DataMapper.Map(dto, this);
            await BusinessRules.CheckRulesAsync();
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Gets a new $root_name$ to edit.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <returns>The new $root_name$.</returns>
        public static async Task<$ROOT_MODEL$> NewAsync(
            IDataPortalFactory factory
            )
        {
            return await factory.GetPortal<$ROOT_MODEL$>().CreateAsync();
        }

        /// <summary>
        /// Gets the specified $root_name$ to edit.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <param name="id">The identifier of the $root_name$.</param>
        /// <returns>The requested $root_name$.</returns>
        public static async Task<$ROOT_MODEL$> GetAsync(
            IDataPortalFactory factory,
            string id
            )
        {
            var criteria = new $ROOT_MODEL$Params(id);
            return await factory.GetPortal<$ROOT_MODEL$>().FetchAsync(criteria.Decode());
        }

        /// <summary>
        /// Builds a new or existing $root_name$.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <param name="childFactory">The child data portal factory.</param>
        /// <param name="dto"></param>
        /// <returns>The $root_name$ built.</returns>
        public static async Task<$ROOT_MODEL$> BuildAsync(
            IDataPortalFactory factory,
            IChildDataPortalFactory childFactory,
            $ROOT_MODEL$Dto dto
            )
        {
            long? teamKey = KeyHash.Decode(ID.$ROOT_MODEL$, dto.$ROOT_MODEL$Id);
            $ROOT_MODEL$ team = teamKey.HasValue ?
                await GetAsync(factory, dto.$ROOT_MODEL$Id!) :
                await NewAsync(factory);
            team.SetValuesOnBuild(dto, childFactory);
            return team;
        }

        /// <summary>
        /// Deletes the specified $root_name$.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <param name="id">The identifier of the $root_name$.</param>
        public static async Task DeleteAsync(
            IDataPortalFactory factory,
            string id
            )
        {
            var criteria = new $ROOT_MODEL$Params(id);
            await factory.GetPortal<$ROOT_MODEL$>().DeleteAsync(criteria.Decode());
        }

        #endregion

        #region Data Access

        [Create]
        [RunLocal]
        private async Task CreateAsync()
        {
            // Load default values.
            await Task.Run(async () =>
            {
                //LoadProperty($ROOT_MODEL$CodeProperty, "");
                await BusinessRules.CheckRulesAsync();
            });
        }

        [Fetch]
        private async Task FetchAsync(
            $ROOT_MODEL$Criteria criteria,
            [Inject] I$ROOT_MODEL$Dal dal
            )
        {
            // Load values from persistent storage.
            $ROOT_MODEL$Dao dao = await dal.FetchAsync(criteria);
            using (BypassPropertyChecks)
                DataMapper.Map(dao, this);
        }

        [Insert]
        protected async Task InsertAsync(
            [Inject] I$ROOT_MODEL$Dal dal
            )
        {
            // Insert values into persistent storage.
            using (var transaction = dal.BeginTransaction())
            {
                using (BypassPropertyChecks)
                {
                    var dao = Copy.PropertiesFrom(this).ToNew<$ROOT_MODEL$Dao>();
                    await dal.InsertAsync(dao);

                    // Set new data.
                    $ROOT_MODEL$Key = dao.$ROOT_MODEL$Key;
                    Timestamp = dao.Timestamp;
                }
                dal.Commit(transaction);
            }
        }

        [Update]
        protected async Task UpdateAsync(
            [Inject] I$ROOT_MODEL$Dal dal
            )
        {
            // Update values in persistent storage.
            using (var transaction = dal.BeginTransaction())
            {
                using (BypassPropertyChecks)
                {
                    var dao = Copy.PropertiesFrom(this).ToNew<$ROOT_MODEL$Dao>();
                    await dal.UpdateAsync(dao);

                    // Set new data.
                    Timestamp = dao.Timestamp;
                }
                dal.Commit(transaction);
            }
        }

        [DeleteSelf]
        protected async Task DeleteSelfAsync(
            [Inject] I$ROOT_MODEL$Dal dal
            )
        {
            using (BypassPropertyChecks)
                await DeleteAsync(new $ROOT_MODEL$Criteria($ROOT_MODEL$Key), dal);
        }

        [Delete]
        protected async Task DeleteAsync(
            $ROOT_MODEL$Criteria criteria,
            [Inject] I$ROOT_MODEL$Dal dal
            )
        {
            // Delete values from persistent storage.
            using (var transaction = dal.BeginTransaction())
            {
                await dal.DeleteAsync(criteria);
                dal.Commit(transaction);
            }
        }

        #endregion
    }$end$]]>
            </Code>
            <Declarations>
                <Literal>
                    <ID>root_name</ID>
                    <ToolTip>The description of the root model in comments.</ToolTip>
                    <Default>root_name</Default>
                </Literal>
                <Literal>
                    <ID>ROOT_MODEL</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>ROOT_MODEL</Default>
                </Literal>
            </Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
