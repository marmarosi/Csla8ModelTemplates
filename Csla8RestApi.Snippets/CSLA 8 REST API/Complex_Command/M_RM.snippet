<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Model | Command model</Title>
            <Author>Mármarosi József</Author>
            <Description>Implements a command model.</Description>
            <Shortcut>c8ccrm</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Represents the $command_name$ command.
    /// </summary>
    [Serializable]
    public class $COMMAND_MODEL$ : CommandBase<$COMMAND_MODEL$>
    {
        #region Properties

        public static readonly PropertyInfo<string?> $ROOT_MODEL$NameProperty = RegisterProperty<string?>(nameof($ROOT_MODEL$Name));
        public string? $ROOT_MODEL$Name
        {
            get => ReadProperty($ROOT_MODEL$NameProperty);
            private set => LoadProperty($ROOT_MODEL$NameProperty, value);
        }

        public static readonly PropertyInfo<$COMMAND_MODEL$Results> ResultsProperty = RegisterProperty<$COMMAND_MODEL$Results>(nameof(Results));
        public $COMMAND_MODEL$Results Results
        {
            get => ReadProperty(ResultsProperty);
            private set => LoadProperty(ResultsProperty, value);
        }

        #endregion

        #region Business Rules

        //private void Validate()
        //{
        //    if (string.IsNullOrEmpty($ROOT_MODEL$Name))
        //        throw new CommandException(ValidationText.$COMMAND_MODEL$_$ROOT_MODEL$Name_Required);
        //}

        //private static void AddObjectAuthorizationRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        typeof($COMMAND_MODEL$),
        //        new IsInRole(
        //            AuthorizationActions.ExecuteMethod,
        //            "Manager"
        //            )
        //        );
        //}

        #endregion

        #region Factory Methods

        /// <summary>
        /// Executes the $command_name$ command.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <param name="criteria">The criteria of the $command_name$ command.</param>
        /// <returns>The command instance.</returns>
        public static async Task<$COMMAND_MODEL$> ExecuteAsync(
            IDataPortalFactory factory,
            $COMMAND_MODEL$Criteria criteria
            )
        {
            return await factory.GetPortal<$COMMAND_MODEL$>().ExecuteAsync(criteria);
        }

        #endregion

        #region Data Access

        [Execute]
        private async Task ExecuteAsync(
            $COMMAND_MODEL$Criteria criteria,
            [Inject] I$COMMAND_MODEL$Dal dal,
            [Inject] IChildDataPortal<$COMMAND_MODEL$Results> resultPortal
            )
        {
            // Execute the command.
            $ROOT_MODEL$Name = criteria.$ROOT_MODEL$Name;
            //Validate();
            List<$COMMAND_MODEL$ResultDao> list = await dal.ExecuteAsync(criteria);

            // Set new data.
            Results = await resultPortal.FetchChildAsync(list);
        }
        #endregion
    }$end$]]>
            </Code>
            <Declarations>
                <Literal>
                    <ID>command_name</ID>
                    <ToolTip>The description of the command model in comments.</ToolTip>
                    <Default>command_name</Default>
                </Literal>
                <Literal>
                    <ID>COMMAND_MODEL</ID>
                    <ToolTip>The name of the command model.</ToolTip>
                    <Default>COMMAND_MODEL</Default>
                </Literal>
                <Literal>
                    <ID>ROOT_MODEL</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>ROOT_MODEL</Default>
                </Literal>
            </Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
